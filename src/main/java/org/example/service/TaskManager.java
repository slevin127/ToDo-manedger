/*
 * —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á: –¥–æ–±–∞–≤–ª—è–µ—Ç, —É–¥–∞–ª—è–µ—Ç,
 * –ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞.
 */


package org.example.service;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.interfaces.Storable;
import org.example.model.Task;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class TaskManager implements Storable {

    // –°–ø–∏—Å–æ–∫ tasks –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤—Å–µ—Ö –∑–∞–¥–∞—á
    private List<Task> tasks = new ArrayList<Task>();

    public class TaskFilter {

        // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        // —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        public List<Task> filterByCategory(String category) {
            List<Task> result = new ArrayList<>();
            for (Task task : tasks) {
                if (task.getCategory().equals(category)) {
                    result.add(task);
                }
            }
            return result;
        }

        // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (true = –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, false = –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
        // —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        public List<Task> filterByStatus(boolean isCompleted) {
            List<Task> result = new ArrayList<>();
            for (Task task : tasks) {
                if (task.isCompleted() == isCompleted) {
                    result.add(task);
                }
            }
            return result;
        }

        // –ú–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        // –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏: "yyyy-MM-dd HH:mm"

        public List<Task> filterByDate(String startDate, String endDate) {
            List<Task> result = new ArrayList<>();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");//–Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ LocalDateTime.
            try {
                LocalDateTime start = LocalDateTime.parse(startDate, formatter);
                LocalDateTime end = LocalDateTime.parse(endDate, formatter);

                for (Task task : tasks) {
                    if (!task.getCreatedAt().isBefore(start) && !task.getCreatedAt().isAfter(end)) {
                        result.add(task);
                    }
                }
            } catch (Exception e) {
                System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç: " + e.getMessage());
            }

            return result;
        }
    }

    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
    public void addTask(Task task) {
        tasks.add(task);
    }

    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    public List<Task> getAllTasks() {
        return tasks;
    }

    //–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    public void markComplete(int index) {
        if (index >= 0 && index < tasks.size())
            tasks.get(index).markCompleted();
    }

    //–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –µ—ë –∏–Ω–¥–µ–∫—Å—É –∏–∑ —Å–ø–∏—Å–∫–∞.
    public void removeTask(int index) {
        if (index >= 0 && index < tasks.size())
            tasks.remove(index);

    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    @Override
    public void saveToFile(String filename) {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JavaTimeModule());

        try {
            // üëá –∏—Å–ø–æ–ª—å–∑—É–µ–º TypeReference, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö
            mapper.writerWithDefaultPrettyPrinter()
                    .forType(new TypeReference<List<Task>>() {})
                    .writeValue(new File(filename), tasks);
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + e.getMessage());
        }
    }


    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    @Override
    public void loadFromFile(String filename) {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JavaTimeModule());

        try {
            Task[] loadedTasks = mapper.readValue(new File(filename), Task[].class);
            tasks = new ArrayList<>(Arrays.asList(loadedTasks));
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: " + e.getMessage());
        }
    }

    // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á: –≤—Å–µ–≥–æ, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    public void printStats() {
        int total = tasks.size();
        int completed = 0;
        int notCompleted = 0;

        for (Task task : tasks) {
            if (task.isCompleted()) {
                completed++;
            } else {
                notCompleted++;
            }
        }

        System.out.println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:");
        System.out.println("–í—Å–µ–≥–æ –∑–∞–¥–∞—á: " + total);
        System.out.println("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + completed);
        System.out.println("–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: " + notCompleted);
    }
    // –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏
    public List<Task> searchByKeyword(String keyword) {
        List<Task> result = new ArrayList<>();
        String lowerKeyword = keyword.toLowerCase();

        for (Task task : tasks) {
            if (task.getTitle().toLowerCase().contains(lowerKeyword)
                    || task.getDescription().toLowerCase().contains(lowerKeyword)) {
                result.add(task);
            }
        }

        return result;
    }

}
